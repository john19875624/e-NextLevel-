// ==UserScript==
// @name         e-NextLevel カレンダー登録ボタン (v2.0 with API Integration)
// @namespace    http://tampermonkey.net/
// @version      2.0
// @description  作業日と時間をGoogleカレンダー（指定ID）に直接登録
// @match        https://www.e-nextlevel.jp/work/detail/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_addElement
// @grant        GM_registerMenuCommand
// @run-at       document-idle
// ==/UserScript==

(function () {
    'use strict';
    const CLIENT_ID = 'YOUR_CLIENT_ID.apps.googleusercontent.com'; // ← Googleで取得
    const API_KEY = 'YOUR_API_KEY'; // ← Googleで取得
    const CALENDAR_ID = '9ebb2cfee458c0715c8034417e4a36e15cff78b5462a91a3a77f50a1fa4ca521@group.calendar.google.com';
    const SCOPES = 'https://www.googleapis.com/auth/calendar.events';

    const REGISTERED_FLAG_PREFIX = 'calendar_registered_';

    // --- Google API読み込み ---
    function loadGapi(callback) {
        if (typeof gapi === 'undefined') {
            GM_addElement('script', {
                src: 'https://apis.google.com/js/api.js',
                onload: callback
            });
        } else {
            callback();
        }
    }

    function authorizeAndAddEvent(eventDetails, flagKey, statusEl) {
        gapi.load('client:auth2', async () => {
            await gapi.client.init({
                apiKey: API_KEY,
                clientId: CLIENT_ID,
                discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"],
                scope: SCOPES
            });

            const authInstance = gapi.auth2.getAuthInstance();
            if (!authInstance.isSignedIn.get()) {
                await authInstance.signIn();
            }

            const startDateTime = formatDateTime(eventDetails.date, eventDetails.startTime);
            const endDateTime = formatDateTime(eventDetails.date, eventDetails.endTime,
                calculateEndTimeDayAdjustment(eventDetails.startTime, eventDetails.endTime));

            const event = {
                summary: eventDetails.title,
                location: eventDetails.jobSiteAddress,
                description: `詳細URL: ${location.href}\n\n持ち物:\n${eventDetails.requiredItems}\n\n服装:\n${eventDetails.dressCode}`,
                start: { dateTime: startDateTime, timeZone: 'Asia/Tokyo' },
                end: { dateTime: endDateTime, timeZone: 'Asia/Tokyo' }
            };

            try {
                await gapi.client.calendar.events.insert({
                    calendarId: CALENDAR_ID,
                    resource: event
                });
                GM_setValue(flagKey, true);
                updateRegistrationStatus(statusEl, true);
                alert('✅ Googleカレンダーに登録しました。');
            } catch (e) {
                alert('❌ カレンダー登録に失敗しました: ' + e.message);
            }
        });
    }

    function getJobIdFromUrl() {
        const match = location.pathname.match(/\/(\d+)$/);
        return match ? match[1] : null;
    }

    function extractDateFromText(text) {
        const match = text.match(/(\d{4})年\s*(\d{1,2})月\s*(\d{1,2})日/);
        return match ? `${match[1]}-${String(match[2]).padStart(2, '0')}-${String(match[3]).padStart(2, '0')}` : '';
    }

    function extractTimesFromText(text) {
        const rangeMatch = text.match(/(\d{1,2}):(\d{2})～(\d{1,2}):(\d{2})/);
        const endTime = rangeMatch ? `${String(rangeMatch[3]).padStart(2, '0')}:${rangeMatch[4]}` : '';
        const timeMatches = Array.from(text.matchAll(/作業日当日\s*(\d{1,2}):(\d{2})/g));
        let startTime = '';
        if (timeMatches.length > 0) {
            startTime = timeMatches.reduce((earliest, curr) => {
                const timeStr = `${String(curr[1]).padStart(2, '0')}:${curr[2]}`;
                return !earliest || timeStr < earliest ? timeStr : earliest;
            }, null);
        } else if (rangeMatch) {
            startTime = `${String(rangeMatch[1]).padStart(2, '0')}:${rangeMatch[2]}`;
        }
        return { startTime, endTime };
    }

    function extractTitle() {
        const el = document.querySelector('h2.jobDetailInfo__title');
        return el?.innerText?.trim() || '';
    }

    function extractClothingAndItems() {
        const detailTitles = document.querySelectorAll('dt.jobDetailOther__title');
        let dressCode = '', requiredItems = '';
        detailTitles.forEach(dt => {
            const titleText = dt.innerText.trim();
            const dd = dt.nextElementSibling;
            if (dd && dd.tagName === 'DD' && dd.classList.contains('jobDetailOther__cont')) {
                const text = dd.innerText.trim();
                if (titleText === '服装') dressCode = text;
                if (titleText === '持ち物') requiredItems = text;
            }
        });
        return { dressCode, requiredItems };
    }

    function extractJobDetails() {
        const text = document.body.innerText;
        const date = extractDateFromText(text);
        const { startTime, endTime } = extractTimesFromText(text);
        const title = extractTitle();
        const address = document.querySelector('li.jobInfoList__item.is_place')?.innerText.trim() || '';
        const { dressCode, requiredItems } = extractClothingAndItems();
        return { date, startTime, endTime, title, jobSiteAddress: address, dressCode, requiredItems };
    }

    function formatDateTime(dateStr, timeStr, addDay = 0) {
        if (!dateStr || !timeStr) return '';
        const [y, m, d] = dateStr.split('-').map(Number);
        const date = new Date(y, m - 1, d);
        date.setDate(date.getDate() + addDay);
        return `${date.toISOString().split('T')[0]}T${timeStr}:00`;
    }

    function calculateEndTimeDayAdjustment(start, end) {
        const [sh, sm] = start.split(':').map(Number);
        const [eh, em] = end.split(':').map(Number);
        return sh * 60 + sm > eh * 60 + em ? 1 : 0;
    }

    function applyStyles(el, styles) {
        Object.assign(el.style, styles);
    }

    function updateRegistrationStatus(el, registered) {
        el.textContent = registered ? '✅ 登録済み' : '🕒 未登録';
        el.style.color = registered ? '#2e7d32' : '#757575';
    }

    function createUI(details, isRegistered, flagKey) {
        const ui = document.createElement('div');
        applyStyles(ui, {
            position: 'fixed', top: '20px', right: '20px', background: '#fff',
            border: '1px solid #ccc', padding: '12px', zIndex: 10000, fontFamily: 'sans-serif',
            borderRadius: '8px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)', maxWidth: '400px'
        });

        const status = document.createElement('div');
        updateRegistrationStatus(status, isRegistered);

        const btn = document.createElement('button');
        btn.textContent = '📅 Googleカレンダーに登録';
        applyStyles(btn, {
            marginTop: '10px', padding: '8px 12px',
            background: '#4285F4', color: '#fff',
            border: 'none', borderRadius: '5px', cursor: 'pointer'
        });

        btn.onclick = () => {
            loadGapi(() => authorizeAndAddEvent(details, flagKey, status));
        };

        ui.innerHTML = `
            <strong>抽出情報:</strong><br>
            日付: ${details.date}<br>
            開始: ${details.startTime}<br>
            終了: ${details.endTime}<br>
            タイトル: ${details.title}<br>
            現場住所: ${details.jobSiteAddress}<br>
            持ち物: ${details.requiredItems}<br>
            服装: ${details.dressCode}<br><br>
        `;
        ui.appendChild(btn);
        ui.appendChild(status);
        document.body.appendChild(ui);
    }

    function main() {
        const jobId = getJobIdFromUrl();
        const flagKey = jobId ? `${REGISTERED_FLAG_PREFIX}${jobId}` : null;
        const isRegistered = flagKey ? GM_getValue(flagKey, false) : false;
        const details = extractJobDetails();
        if (!details.date || !details.startTime || !details.endTime || !details.title) return;
        createUI(details, isRegistered, flagKey);
    }

    main();
})();
